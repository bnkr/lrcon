== Building with CMake ==

cd path/to/source
mkdir build
cd build
# See cmake --help for more about generators.
cmake -G"your wanted generator type" path/to/source
# Use ccmake gui to perform the configure step.
ccmake .

# If unix install
make 
make install

Otherwise do whatever your generator normally does to install stuff.

Toggleable options in ccmake are all named WANT_<feature>.  There are more in
advanced mode, but those are typically for a way to quickly remove a dependancy.

The cmake cache only needs to be written to once.  After that, all rebuilding is 
automated just by using make (or your generator's equivilent).

== Cross-Compiling ==

As above, but for the cmake command add -DCMAKE_TOOLCHAIN_FILE=your-toolchain.  Look
at cmake's documentation for how to define this.

The Qt parts are extremely hard to get working.  Probably what will happen is that
it will find the Qt binaries, but not source files and libraries.  The procedure is
to get a version of Qt compiled on windows, move it to Linux, then in the ccmake
step toggle `advanced mode' and define evey QT_ prefixed variable there which has
a value suffixed -NOTFOUND.  Not all of Qt is used: look at the LDFLAGS (and others)
which are used on the Unix build to see which libs are necessary to be defined.

This can also be done with -DVAR=VAL from the cmake command if you wanted to script
it (recommended if you are expecting to recompile later).

== Distributing ==

You'll need to know CMake and CPack.  Most stuff can be done with ccmake (the cmake
GUI) if you turn on the CPack generators by setting variables like CPACK_SOURCE_*
and CPACK_BINARY_*.  

Unfortunately, the CPack generators are not far advanced.  In particular for a source
distribution, you need to manually copy built docs into the source tree, and also 
do the whole thing from a clean clone from git.
